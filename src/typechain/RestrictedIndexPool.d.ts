/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RestrictedIndexPoolInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "exitPoolTo(address,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getController()": FunctionFragment;
    "getCurrentDesiredTokens()": FunctionFragment;
    "getCurrentTokens()": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getExitFee()": FunctionFragment;
    "getExitFeeRecipient()": FunctionFragment;
    "getNumTokens()": FunctionFragment;
    "getSwapFee()": FunctionFragment;
    "getTokenRecord(address)": FunctionFragment;
    "getTotalDenormalizedWeight()": FunctionFragment;
    "getUsedBalance(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isBound(address)": FunctionFragment;
    "isPublicSwap()": FunctionFragment;
    "name()": FunctionFragment;
    "pair()": FunctionFragment;
    "redeemAll()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPoolTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDesiredTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDenormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isBound", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPublicSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeemAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPoolTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDesiredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LOG_EXIT(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_EXIT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class RestrictedIndexPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RestrictedIndexPoolInterface;

  functions: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPoolTo(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPoolTo(address,uint256)"(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getController(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getController()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getCurrentDesiredTokens(
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    "getCurrentDesiredTokens()"(
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    getCurrentTokens(
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    "getCurrentTokens()"(
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDenormalizedWeight(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getExitFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getExitFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getExitFeeRecipient(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getExitFeeRecipient()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getNumTokens(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNumTokens()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSwapFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSwapFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTokenRecord(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      record: {
        bound: boolean;
        ready: boolean;
        lastDenormUpdate: number;
        denorm: BigNumber;
        desiredDenorm: BigNumber;
        index: number;
        balance: BigNumber;
        0: boolean;
        1: boolean;
        2: number;
        3: BigNumber;
        4: BigNumber;
        5: number;
        6: BigNumber;
      };
      0: {
        bound: boolean;
        ready: boolean;
        lastDenormUpdate: number;
        denorm: BigNumber;
        desiredDenorm: BigNumber;
        index: number;
        balance: BigNumber;
        0: boolean;
        1: boolean;
        2: number;
        3: BigNumber;
        4: BigNumber;
        5: number;
        6: BigNumber;
      };
    }>;

    "getTokenRecord(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      record: {
        bound: boolean;
        ready: boolean;
        lastDenormUpdate: number;
        denorm: BigNumber;
        desiredDenorm: BigNumber;
        index: number;
        balance: BigNumber;
        0: boolean;
        1: boolean;
        2: number;
        3: BigNumber;
        4: BigNumber;
        5: number;
        6: BigNumber;
      };
      0: {
        bound: boolean;
        ready: boolean;
        lastDenormUpdate: number;
        denorm: BigNumber;
        desiredDenorm: BigNumber;
        index: number;
        balance: BigNumber;
        0: boolean;
        1: boolean;
        2: number;
        3: BigNumber;
        4: BigNumber;
        5: number;
        6: BigNumber;
      };
    }>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUsedBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUsedBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initialize(
      _uniBurn: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _uniBurn: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isBound(
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBound(address)"(
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isPublicSwap(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPublicSwap()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pair(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pair()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    redeemAll(overrides?: Overrides): Promise<ContractTransaction>;

    "redeemAll()"(overrides?: Overrides): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPool(uint256,uint256[])"(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPoolTo(
    to: string,
    poolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPoolTo(address,uint256)"(
    to: string,
    poolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getController(overrides?: CallOverrides): Promise<string>;

  "getController()"(overrides?: CallOverrides): Promise<string>;

  getCurrentDesiredTokens(overrides?: CallOverrides): Promise<string[]>;

  "getCurrentDesiredTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

  "getCurrentTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getDenormalizedWeight(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDenormalizedWeight(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getExitFeeRecipient(overrides?: CallOverrides): Promise<string>;

  "getExitFeeRecipient()"(overrides?: CallOverrides): Promise<string>;

  getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getSwapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenRecord(
    token: string,
    overrides?: CallOverrides
  ): Promise<{
    bound: boolean;
    ready: boolean;
    lastDenormUpdate: number;
    denorm: BigNumber;
    desiredDenorm: BigNumber;
    index: number;
    balance: BigNumber;
    0: boolean;
    1: boolean;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: number;
    6: BigNumber;
  }>;

  "getTokenRecord(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<{
    bound: boolean;
    ready: boolean;
    lastDenormUpdate: number;
    denorm: BigNumber;
    desiredDenorm: BigNumber;
    index: number;
    balance: BigNumber;
    0: boolean;
    1: boolean;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: number;
    6: BigNumber;
  }>;

  getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalDenormalizedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUsedBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getUsedBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _uniBurn: string,
    _pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _uniBurn: string,
    _pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

  "isBound(address)"(t: string, overrides?: CallOverrides): Promise<boolean>;

  isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

  "isPublicSwap()"(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  "pair()"(overrides?: CallOverrides): Promise<string>;

  redeemAll(overrides?: Overrides): Promise<ContractTransaction>;

  "redeemAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    src: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitPoolTo(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPoolTo(address,uint256)"(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<string>;

    "getController()"(overrides?: CallOverrides): Promise<string>;

    getCurrentDesiredTokens(overrides?: CallOverrides): Promise<string[]>;

    "getCurrentDesiredTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

    "getCurrentTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDenormalizedWeight(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeRecipient(overrides?: CallOverrides): Promise<string>;

    "getExitFeeRecipient()"(overrides?: CallOverrides): Promise<string>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRecord(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      bound: boolean;
      ready: boolean;
      lastDenormUpdate: number;
      denorm: BigNumber;
      desiredDenorm: BigNumber;
      index: number;
      balance: BigNumber;
      0: boolean;
      1: boolean;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: number;
      6: BigNumber;
    }>;

    "getTokenRecord(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      bound: boolean;
      ready: boolean;
      lastDenormUpdate: number;
      denorm: BigNumber;
      desiredDenorm: BigNumber;
      index: number;
      balance: BigNumber;
      0: boolean;
      1: boolean;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: number;
      6: BigNumber;
    }>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsedBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUsedBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _uniBurn: string,
      _pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _uniBurn: string,
      _pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

    "isBound(address)"(t: string, overrides?: CallOverrides): Promise<boolean>;

    isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

    "isPublicSwap()"(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    "pair()"(overrides?: CallOverrides): Promise<string>;

    redeemAll(overrides?: CallOverrides): Promise<void>;

    "redeemAll()"(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(src: string | null, dst: string | null, amt: null): EventFilter;

    LOG_EXIT(
      caller: string | null,
      tokenOut: string | null,
      tokenAmountOut: null
    ): EventFilter;

    Transfer(src: string | null, dst: string | null, amt: null): EventFilter;
  };

  estimateGas: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPoolTo(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPoolTo(address,uint256)"(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    "getController()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDesiredTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentDesiredTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDenormalizedWeight(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFeeRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRecord(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenRecord(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsedBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUsedBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _uniBurn: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _uniBurn: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isBound(t: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBound(address)"(
      t: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPublicSwap(overrides?: CallOverrides): Promise<BigNumber>;

    "isPublicSwap()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    "pair()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAll(overrides?: Overrides): Promise<BigNumber>;

    "redeemAll()"(overrides?: Overrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPoolTo(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPoolTo(address,uint256)"(
      to: string,
      poolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getController()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentDesiredTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentDesiredTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDenormalizedWeight(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getExitFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitFeeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExitFeeRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSwapFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenRecord(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenRecord(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsedBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUsedBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _uniBurn: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _uniBurn: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isBound(
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBound(address)"(
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPublicSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPublicSwap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "redeemAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
